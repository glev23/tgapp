МОД: PLAN (только планирование, без написания кода)

Назначение
- Составить исчерпывающий план разработки Telegram Mini App для отеля (Radisson Collection Hotel, Moscow) — мобильного веб-интерфейса, открывающегося в Telegram WebView по домену https://tg.
- План НЕ пишет код и НЕ генерирует компоненты. Только: структура, этапы, артефакты, критерии готовности.

Контекст и источники данных
- Содержимое миниаппа формируется из файлов:
  - info.txt — структурированная справка об отеле (описания, номера, правила, Fitness & SPA, рестораны/бары, досуг, транспорт).
  - info_two.txt — маркетинговые материалы (локация, клубные этажи, конференц-центр, банкетные залы, флотилия яхт, и т.п.).
  - menu.txt — компактное меню рум‑сервиса (русский).
  - menu_two.txt — полное меню рум‑сервиса, барная карта (русский).
- Требование: проанализировать ВСЕ указанные файлы и на основании их содержимого определить:
  - Полный перечень разделов/вкладок приложения
  - Наполнение страниц
  - Необходимые фильтры/категории/поиск
  - Структуру данных (предложение по JSON‑схемам)

Технологический стек (Frontend)
- React + Vite (TypeScript желателен, JavaScript допустим)
- Tailwind CSS (utility‑first)
- Radix UI (headless примитивы):
  @radix-ui/react-dialog, @radix-ui/react-tooltip, @radix-ui/react-popover, @radix-ui/react-dropdown-menu, @radix-ui/react-tabs, @radix-ui/react-scroll-area, @radix-ui/react-switch, @radix-ui/react-slider
- Анимации: framer-motion (опционально GSAP точечно), lottie-react (по необходимости)
- Иконки: lucide-react
- Telegram SDK: @twa-dev/sdk
- Стили/утилиты: tailwindcss, postcss, autoprefixer, clsx, tailwind-merge, class-variance-authority
- Разрешены точечные SCSS‑модули для сложных эффектов.
- Нельзя: Bootstrap/MUI/Ant и любые тяжёлые глобальные UI‑киты; инлайн‑большие SVG‑анимации.

Тематизация/визуал
- Использовать системные цвета Telegram через CSS‑переменные --tg-theme-*.
- Добавить токены (на уровне дизайн‑системы): --bg, --text, --accent, радиусы, тени.
- Tailwind должен поддерживать bg-[var(--..)].
- Визуальный стиль: современный, мобильный, «дорогой» вид. Микровзаимодействия, тени, аккуратные градиенты, стеклянные слои. 60fps, минимизировать тяжёлые blur‑эффекты.

Телеграм‑интеграции
- Интегрировать Back/Main Button из Telegram Web Apps SDK (навигация, CTA).
- Учесть динамическую тему Telegram (светлая/тёмная), адаптацию safe‑area.
- Инициализация/expand, работа с initData (позже для API‑запросов).

Производительность и качество
- Код‑сплиттинг, ленивые экраны и данные.
- Изображения: webp/автоматические размеры, отложенная загрузка.
- Цель: 60fps; Lighthouse ≥ 90 на мобильных.
- Доступность: фокус‑состояния, ARIA для headless компонентов, контраст.

Архитектура миниаппа (IA) — результат анализа info*.txt и menu*.txt
1) Главная
   - Короткий hero: позиционирование отеля, быстрые ссылки.
   - Быстрые разделы: Об отеле, Номера, Fitness & SPA, Рестораны/Бары, Меню (Room Service), Конференции/Ивенты, Контакты/Как добраться.
2) Об отеле
   - Локация/логистика (аэропорты, транспорт, метро)
   - История/интерьеры/коллекция
   - Виды из номеров/панорамы, диорама, смотровая площадка
3) Номера
   - Категории (из info.txt): площадь, тип кроватей, оснащение, преимущества
   - Опции комфортности, доступность для маломобильных гостей
4) Fitness & SPA
   - Описание зоны, расписание, правила посещения
   - Процедуры/услуги/цены (если есть), запись/контакты
5) Рестораны и бары (в комплексе)
   - Список заведений: кухня, часы работы, средний чек, особенности
   - Флотилия яхт: описание, форматы, бронирование
6) Меню (Room Service)
   - Категории из menu_two.txt/menu.txt: завтраки, холодные/горячие закуски, супы, салаты, паста, основные блюда, гарниры, соусы, десерты, детское меню, кофейная/чайная карта, соки, безалкогольные, алкоголь/вина/крепкий алкоголь и т.д.
   - Фильтры/бейджи: без глютена, без лактозы, вегетарианское, острое, халяль
   - Поиск по названию/ингредиентам
   - Страница позиции: состав/вес/калории/цена/допы
7) Конференции и мероприятия
   - Залы: площадь, высота, вместимость, варианты рассадки, оборудование, тарифы (целый/полдня), особенности, виртуальные туры (ссылки)
   - Кейтеринг, схема этажа
8) Контакты и навигация
   - Адрес, карта/схемы, телефоны, ссылки (официальный сайт), паркинг, трансферы

Предложение по структурам данных (результат плана, без кода)
- Нормализованные сущности:
  - RoomCategory: id, название, площадь, кровати, удобства, описания, доступность
  - Facility/Service: id, название, описание, расписание, правила
  - Venue (Restaurant/Bar): id, название, кухня, часы, средний чек, особенности
  - MenuCategory: id, название, порядок, иконка
  - MenuItem: id, категорияId, название, описание, цена, вес/объём, калории, теги (без глютена/лактозы/острое/вегетарианское/халяль), допы
  - EventHall: id, название, площадь, высота, вместимость (по схемам), тарифы (целый/полдня), оборудование, особенности
  - Media: изображения/видео/виртуальные туры (URL/подписи)
- Задача мода: извлечь поля из txt‑файлов, предложить логичные ключи/типы, уделить внимание количественным параметрам (вес/ккал/объём/порции).

Навигация и UX
- Нижняя навигация (Tabs) или одноуровневое меню с быстрыми CTA.
- Карточки с бейджами (теги), поиск, сортировка по цене/популярности (если релевантно).
- Детальные страницы с лёгкими анимациями (framer-motion), skeleton‑загрузки.
- BackButton Telegram синхронизирован с роутером; MainButton для ключевых CTA (например, «Позвонить», «Бронировать зал», «Связаться с консьержем»).

Визуальные принципы (без кода)
- Система токенов на базе --tg-theme-*; единый масштаб типографики и отступов.
- Микроанимации: hover/press/appear, аккуратные spring‑переходы.
- Эффекты: стекло/градиенты/неоморфизм допустимы точечно (аккуратность и перформанс).

Технические требования и ограничения
- Стек: React + Vite (TS/JS), Tailwind, Radix (headless), framer-motion, @twa-dev/sdk, lottie-react, GSAP точечно.
- Утилиты: tailwindcss, postcss, autoprefixer, clsx, tailwind-merge, class-variance-authority.
- Запрет: Bootstrap/MUI/Ant и подобные; тяжёлые глобальные фреймворки; инлайн‑большие SVG‑анимации.

Нефункциональные требования
- Производительность: код‑сплиттинг, lazy, webp, 60fps.
- Доступность: контраст, ARIA, клавиатурная навигация.
- Адаптив: мобильный приоритет, поддержка малых экранов, safe‑area.
- Локализация: ru (en — опционально, с учётом исходных данных на русском).

Интеграции/безопасность (при расширении)
- Верификация Telegram initData на бэкенде (если появится API).
- Политика конфиденциальности/условия (ссылка), логирование ошибок (Sentry — опционально).

Этапы и артефакты (что должен выдать мод PLAN)
1) Анализ контента
   - Выделить все разделы, подсекции и категориальную структуру на основании info.txt, info_two.txt, menu.txt, menu_two.txt.
   - Список страниц/вкладок и их описание: цель, ключевые блоки, поля, теги/фильтры, CTA.
   - Таблица соответствия: из какого файла берётся какой контент (источник → раздел → поля).
2) Информационная архитектура (IA)
   - Карта экранов и переходов, схема навигации (Tabs/Stack), поведение Back/Main Button.
3) Модель данных (черновик JSON‑схем)
   - Перечень сущностей/полей (см. «Предложение по структурам данных»), связи, ключи.
   - Правила нормализации повторяющихся блоков (теги: без глютена/лактозы и т.д.).
4) UI/UX‑гайд
   - Токены (перечень), состояния, паттерны карточек/списков/деталок, skeleton‑состояния, принципы анимаций.
   - Примеры анимационных сценариев (словесно, без кода).
5) Перформанс/качество
   - Бюджеты и цели (Lighthouse, вес бандла, lazy), стратегия изображений.
6) Дорожная карта
   - Итерации: M0 (каркас и навигация), M1 (контент разделов Об отеле/Номера/SPA), M2 (Меню/Фильтры/Поиск), M3 (Конференции/залы), M4 (финполировка, аналитика).
   - Критерии готовности каждой итерации, риски и допущения.

Критерии приёмки плана
- Полнота разделов (всё из файлов учтено и разложено по вкладкам/страницам).
- Ясные JSON‑сущности/поля (без кода, но с понятной структурой данных).
- Чёткие UX‑принципы и навигация с учётом Telegram Back/Main Button.
- Чёткие перформанс‑цели и правила визуала.
- Отсутствие кода в артефактах мода PLAN — только текстовые спецификации и структуры.

Напоминание для мода PLAN
- Не писать код. Не генерировать файлы проекта. Выдавать только план, структуру, перечни, критерии и дорожную карту.
- При необходимости ссылаться на источники: info.txt, info_two.txt, menu.txt, menu_two.txt. 

Медиа и плейсхолдеры (изображения отсутствуют на старте)
- На всех экранах использовать заглушки вместо фото: однотонные/градиентные плейсхолдеры, иконки, skeleton-блоки.
- Зафиксировать размеры и соотношения сторон карточек/баннеров/детальных экранов, чтобы последующая замена на реальные изображения не ломала сетку.
- Lazy-load для изображений; по возможности webp/avif, fallback png/jpeg.
- Обязательные alt‑тексты и фокус‑состояния для доступности.
- В моделях данных держать поля media.url и media.alt необязательными (могут быть пустыми на старте).
- Предусмотреть централизованный хелпер/адаптер для выдачи плейсхолдеров, чтобы заменить их на реальные изображения в одной точке. 